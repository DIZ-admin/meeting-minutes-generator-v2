services:
  # PostgreSQL для хранения данных
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-meeting_protocol}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./output:/data/output
      - ./logs:/data/logs
      - ./uploads:/data/uploads
      - ./cache:/data/cache
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TRANSCRIPTION_LANG=${TRANSCRIPTION_LANG:-de}
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meeting_protocol}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - OUTPUT_DIR=/data/output
      - LOGS_DIR=/data/logs
      - UPLOADS_DIR=/data/uploads
      - CACHE_DIR=/data/cache
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys, importlib.util; sys.exit(0 if importlib.util.find_spec('app') else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    # Запускаем сервис в режиме ожидания
    entrypoint: ["tail", "-f", "/dev/null"]
    read_only: false
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      
  # Веб-интерфейс
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./output:/data/output
      - ./logs:/data/logs
      - ./uploads:/data/uploads
      - ./cache:/data/cache
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TRANSCRIPTION_LANG=${TRANSCRIPTION_LANG:-de}
      - REDIS_URL=redis://redis:6379
      - OUTPUT_DIR=/data/output
      - LOGS_DIR=/data/logs
      - UPLOADS_DIR=/data/uploads
      - CACHE_DIR=/data/cache
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meeting_protocol}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    entrypoint: ["python"]
    command: /app/run_web.py
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    read_only: false
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp

  # Сервис для batch-обработки
  batch:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./output:/data/output
      - ./logs:/data/logs
      - ./uploads:/data/uploads
      - ./cache:/data/cache
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TRANSCRIPTION_LANG=${TRANSCRIPTION_LANG:-de}
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meeting_protocol}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - OUTPUT_DIR=/data/output
      - LOGS_DIR=/data/logs
      - UPLOADS_DIR=/data/uploads
      - CACHE_DIR=/data/cache
    restart: "no"  # Запускается вручную когда необходимо
    depends_on:
      redis:
        condition: service_healthy
    command: /data/uploads --batch --output /data/output
    read_only: false
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    profiles:
      - batch

  # Сервис для обработки одиночных файлов
  process:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./output:/data/output
      - ./logs:/data/logs
      - ./uploads:/data/uploads
      - ./cache:/data/cache
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TRANSCRIPTION_LANG=${TRANSCRIPTION_LANG:-de}
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meeting_protocol}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - OUTPUT_DIR=/data/output
      - LOGS_DIR=/data/logs
      - UPLOADS_DIR=/data/uploads
      - CACHE_DIR=/data/cache
    restart: "no"  # Запускается вручную когда необходимо
    depends_on:
      redis:
        condition: service_healthy
    command: ${AUDIO_FILE:-/data/uploads/example.wav}
    read_only: false
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    profiles:
      - process

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
